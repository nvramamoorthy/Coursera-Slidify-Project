table(trainIndicator)
head(spam)
trainSpam=spam[trainIndicotor==1,]
trainSpam=spam[trainIndicator==1,]
testSpam=spam[trainIndicator==0,]
names(trainSpam)
names(testSpam)
table(trainSpam$type)
plot(trainSpam$capitalAce~trainSpam$type)
plot(trainSpam$capitalAve~trainSpam$type)
swirl
swirl()
install.packages("swirl")
swirl
swirl()
ls()
library(swirl)
ls()
install_from_swirl("Regression Models")
install.packages("UsingR")
library(UsingR)
library(manupulate)
library(manipulate)
data(galton)
swirl()
plot(child~parent,glaton)
plot(child~parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline<-lm(child~parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit<-lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild<-var(child)
varChild<-var(child, galton)
skip
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild,(varRes+varEst))
all.equal(varChild,varEst+varRes)
efit<-lm(accel~mag+dist.)
efit<-lm(accel~mag+dist,attenu)
mean(residuals)
mean(efit$residuals)
cov(attenu$mad)
cov(attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
x<-c(0,18,-1.54,0.42,0.95)
y<-c(2,1,3,1)
weighted.mean(x,y)
x<-c(0.18,-1.54,0.42,0.95)
weighted.mean(x,y)
sum(x*y)/7
install_fram_swirl(statistical Inference)
install_from_swirl(statistical Inference)
install_from_swirl("statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
1/52
52
4/52
0
12/52
11/51
10/50
2/11
2/50
2/51
supressPackagesStartupMessages(library(googleVis))
suppressPackagesStartupMessages(library(googleVis))
libtrary(googleVis)
library(googleVis)
install.packages('googleVis')
library(googleVis)
suppressPackagesStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
M<-gvisMotionChart(Fruits, "Fruits", "year",option=list(width=600,height=400))
M<-gvisMotionChart(Fruits, "Fruit", "year",option=list(width=600,height=400))
Y
M<-gvisMotionChart(Fruits, "Fruit", "Year",option=list(width=600,height=400))
print(M, "chart")
print(M, "chart")
G<-gvsGeoChart((Exports,locationvar=="Country",colorvar="Profit",option=list(width=600,height=400))
G<-gvisGeoChart((Exports,locationvar=="Country",colorvar="Profit",option=list(width=600,height=400))
G<-gvisGeoChart((Exports,locationvar="Country",colorvar="Profit",option=list(width=600,height=400))
G<-gvisGeoChart(Exports,locationvar="Country",colorvar="Profit",option=list(width=600,height=400))
print(G,"chart")
library(devtools)
install.packages("devtools")
ls()
---
east<-subset(pollition,region=="east")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(kernlab)
data("spam")
inTrain<-createDataPartition(y=spam$type,p=0.75,list = FALSE)
training<-spam[inTrain]
testing<-spam[-inTrain]
dim(testing)
dim(training)
data()
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list = FALSE)
training<-spam[inTrain]
testing<-spam[-inTrain]
dim(training)
spam
training
testing
dim(training)
set.seed(32323)
folds<-createFolds(y=spam$type,k10,list=TRUE,returnTrain = TRUE)
folds<-createFolds(y=spam$type,k=10,list=TRUE,returnTrain = TRUE)
sapply(fold,length)
sapply(folds,length)
inTrain<-createDataPartition(y=spam$type,p=0.75,list = FALSE)
library(ISLR)
install.packages("ISLR")
library(ggplot2)
data("Wage")
data(Wage)
library(ISLR)
data(Wage)
summary(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list = FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain]
dim(training)
dim(testing)
featurePlot(x=traing[,c("age","education","jobclass")]), y=training$wage,plot="pairs"
featurePlot(x=training[,c("age","education","jobclass")]), y=training$wage,plot="pairs"
featurePlot(x=training[,c("age","education","jobclass")]), y=training$wage,plot="pairs"
featurePlot(x=training[c("age","education","jobclass")]), y=training$wage,plot="pairs"
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage,plot="pairs"
)
qplot(age,wage,data = training)
library(devtools)
install_github("pablobarbera/Rfacebook/Rfacebook")
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)", app_secret="1A2B3C4D",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1489560324667804", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)", app_secret="1A2B3C4D",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1489560324667804", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)", app_secret="1A2B3C4D",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)", app_secret="1A2B3C4D",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)", app_secret="1A2B3C4D",extended_permissions = TRUE)
require("Rfacebook")
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)", app_secret="1A2B3C4D",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)"
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1489560324667804", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)", app_secret="1A2B3C4D",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="123456789", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1489560324667804", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)
save(fb_oauth, file="fb_oauth")
load("fb_oauth")
me <- getUsers("me",token=fb_oauth)
my_likes <- getLikes(user="me", token=fb_oauth)
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1489560324667804", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)
AirPassengers
ChickWeight
dim(ChickWeight)
Nile
dim(Nile)
str(Nile)
data(package = .packages(all.available = TRUE))
installed.packages()
require(Rfacebook)
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
me
my_friends
require(Rfacebook)
load("fb_oauth.Rd")
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1489560324667804", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)
require(Rfacebook)
load("fb_oauth.Rd")
my_likes
my_friends-info
me
require(Rfacebook)
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
require(Rfacebook)
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
install.packages("igraph")
require(igraph)
library(igraph)
require(igraph)
require(Rfacebook)
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
my_friends
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
?getFriends
?getFriends
require("Rfacebook")
fb_oauth <- fbOAuth(app_id="require("Rfacebook")
fb_oauth <- fbOAuth(app_id="1489560324667804", app_secret="c49ab2ca6ea69d80bd2ab07f6df8fcac",extended_permissions = TRUE)
token="877af94f322e3c632f9b15cd30a86a65"
require(Rfacebook)
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
require(Rfacebook)
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
my_friends
my_friends
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
me
token<-"CAACEdEose0cBAENGnpZAlAgg2uSX0qGzAUHK9GnwZBg8GOOoXYXQYkVMzv5sc1vDnU1dKX9zRFZCA9a8kIoPZAy6J8z9WqgWbsAfDQQTEtMnYvqfpIORRBLRqGKZANBijz74SVuZCllhSOdyhxKND1Pq9qqX9mUfJd5MU3rY1mifQy56HhlZCSV3njCuosJboC8npts4mVXgxqZATpS0wkZA9lxyRhIPK602hKUkzRfnzEwZDZD"
me<-getUsers("me",token = token)
me$name
my_friends <- getFriends(token, simplify=TRUE)
my_friends
my_friends_info <- getUsers(my_friends$id, token=token, private_info=TRUE)
my_friends_info
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
table(my_friends_info$location)
table(my_friends_info$hometown)
singletons <- rowSums(my_network)==0
my_network <- getNetwork(fb_oauth, format="adj.matrix")
my_friends_info
website
my_friends_info
me
str(me)
me$category
me$likes
my_likes
my_friends_info <- getUsers(my_friends$id, token=token, private_info=TRUE)
my_friends_info
require(Rfacebook)
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
token
require(RCurl)
require(rjson)
facebook <-  function( path = "me", token = token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s&access_token=%s", path, options, access_token ) )
fromJSON( data )
require(RCurl)
require(rjson)
facebook <-  function( path = "me", token = token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s&access_token=%s", path, options, access_token ) )
fromJSON( data )
facebook <-  function( path = "me", token = token, options){
if( !missing(options) ){
options <- sprintf( "?%s", paste( names(options), "=", unlist(options), collapse = "&", sep = "" ) )
} else {
options <- ""
}
data <- getURL( sprintf( "https://graph.facebook.com/%s%s&access_token=%s", path, options, access_token ) )
fromJSON( data )
token<-"CAACEdEose0cBAL77LZCLAXZAFmYPbSwIikq9f7yRPnejqiz4bOt9m4ZAPkn05ZCZCTOk3lb6aGTQlQnFltSWFwIoB0ZC1inVC0ZAJPeZCj6zL0lDhgCrMYX8IO5imx14J22uZBzfwFTYhS81umomvy043NSs1DVHGGLh8OZC0kAYly85QQUQceR4pj46WTvueMrKWZCMSDRm4TXdWmwxPNJcPpiI07I10zh2CbMGxnCv4oZAsQZDZD"
library(Rfacebook)
me
me<-getUser("me",token=token)
me<-getUsers("me",token=token)
me
my_friends_info
my_friends_info<-getUsers(my_friends$id,token = token,private_info = TRUE)
my_friends<-getFriends(token,simplify = TRUE)
my_friends_info<-getUsers(my_friends$id,token = token,private_info = TRUE)
table(my_friends_info$name)
table(my_friends_info$locale)
table(my_friends_info$birthday)
table(my_friends_info$relationship_status)
library(shiny)
library(shinyapps)
runApp()
setwd("~/Desktop/DataProduct/Coursera-Shiny-Project")
setwd("~/Desktop/DataProduct/Coursera-Shiny-Project")
runApp()
library(devtools)
library(slidify)
install_github('slidifyLibraries','ramnathv')
slidify(index.Rmd)
slidify('index.Rmd')
---
title       : First Presentation
author("coursera-Project")
setwd("~/Desktop/DataProduct/Coursera-Slidify-Project")
author("coursera-Project")
slidify('index.Rmd')
slidify('index.Rmd')
library(knitr)
slidify('index.Rmd')
setwd("~/Desktop/DataProduct")
author("Slidify-Project")
slidify('index.Rmd')
author("Slidify-Project")
setwd("~/Desktop/DataProduct/Slidify-Project")
author("Project-1")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(devtools)
slidify('index.Rmd')
slidify('index.Rmd')
install_github('slidifyLibraries','ramnathv')
slidify('index.Rmd')
slidify('index.Rmd')
slidify("index.Rmd")
RPress-1
setwd("~/Desktop/DataProduct/RPress")
setwd("~/Desktop/DataProduct/Coursera-Shiny-Project")
runApp()
runApp()
shiny::runApp()
setwd("~/Desktop/DataProduct/Slidify-Project/Project-1")
slidify(index.Rmd)
slidify("index.Rmd")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages('stingr')
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
devtools::install_github('muschellij2/slidify')
install.packages('stringr')
install.packages("stringr")
install_version("stringr", version="0.6.2", type = "source")
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
library(knitr)
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
browseURL('index.html')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.Rmd')
slidify("index.Rmd")
browseURL('index.Rmd')
setwd("~/Desktop/DataProduct/Coursera-Slidify-Project")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("~/Desktop/DataProduct/Coursera-Shiny-Project")
runApp
library(shiny)
runApp
runApp()
library(shinyapps)
runApp()
runApp()
setwd("~/Desktop/DataProduct/Coursera-Slidify-Project")
slidify('index.Rmd')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
